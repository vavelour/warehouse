// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: warehouse.proto

package warehouse_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WarehouseV1_ReserveItems_FullMethodName        = "/warehouse.WarehouseV1/ReserveItems"
	WarehouseV1_ReleaseReserveItems_FullMethodName = "/warehouse.WarehouseV1/ReleaseReserveItems"
	WarehouseV1_GetRemainingItems_FullMethodName   = "/warehouse.WarehouseV1/GetRemainingItems"
)

// WarehouseV1Client is the client API for WarehouseV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseV1Client interface {
	ReserveItems(ctx context.Context, in *ReserveItemsRequest, opts ...grpc.CallOption) (*ReserveItemsResponse, error)
	ReleaseReserveItems(ctx context.Context, in *ReleaseReserveItemsRequest, opts ...grpc.CallOption) (*ReleaseReserveItemsResponse, error)
	GetRemainingItems(ctx context.Context, in *GetRemainingItemsRequest, opts ...grpc.CallOption) (*GetRemainingItemsResponse, error)
}

type warehouseV1Client struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseV1Client(cc grpc.ClientConnInterface) WarehouseV1Client {
	return &warehouseV1Client{cc}
}

func (c *warehouseV1Client) ReserveItems(ctx context.Context, in *ReserveItemsRequest, opts ...grpc.CallOption) (*ReserveItemsResponse, error) {
	out := new(ReserveItemsResponse)
	err := c.cc.Invoke(ctx, WarehouseV1_ReserveItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseV1Client) ReleaseReserveItems(ctx context.Context, in *ReleaseReserveItemsRequest, opts ...grpc.CallOption) (*ReleaseReserveItemsResponse, error) {
	out := new(ReleaseReserveItemsResponse)
	err := c.cc.Invoke(ctx, WarehouseV1_ReleaseReserveItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseV1Client) GetRemainingItems(ctx context.Context, in *GetRemainingItemsRequest, opts ...grpc.CallOption) (*GetRemainingItemsResponse, error) {
	out := new(GetRemainingItemsResponse)
	err := c.cc.Invoke(ctx, WarehouseV1_GetRemainingItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseV1Server is the server API for WarehouseV1 service.
// All implementations must embed UnimplementedWarehouseV1Server
// for forward compatibility
type WarehouseV1Server interface {
	ReserveItems(context.Context, *ReserveItemsRequest) (*ReserveItemsResponse, error)
	ReleaseReserveItems(context.Context, *ReleaseReserveItemsRequest) (*ReleaseReserveItemsResponse, error)
	GetRemainingItems(context.Context, *GetRemainingItemsRequest) (*GetRemainingItemsResponse, error)
	mustEmbedUnimplementedWarehouseV1Server()
}

// UnimplementedWarehouseV1Server must be embedded to have forward compatible implementations.
type UnimplementedWarehouseV1Server struct {
}

func (UnimplementedWarehouseV1Server) ReserveItems(context.Context, *ReserveItemsRequest) (*ReserveItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveItems not implemented")
}
func (UnimplementedWarehouseV1Server) ReleaseReserveItems(context.Context, *ReleaseReserveItemsRequest) (*ReleaseReserveItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseReserveItems not implemented")
}
func (UnimplementedWarehouseV1Server) GetRemainingItems(context.Context, *GetRemainingItemsRequest) (*GetRemainingItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemainingItems not implemented")
}
func (UnimplementedWarehouseV1Server) mustEmbedUnimplementedWarehouseV1Server() {}

// UnsafeWarehouseV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseV1Server will
// result in compilation errors.
type UnsafeWarehouseV1Server interface {
	mustEmbedUnimplementedWarehouseV1Server()
}

func RegisterWarehouseV1Server(s grpc.ServiceRegistrar, srv WarehouseV1Server) {
	s.RegisterService(&WarehouseV1_ServiceDesc, srv)
}

func _WarehouseV1_ReserveItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).ReserveItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseV1_ReserveItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).ReserveItems(ctx, req.(*ReserveItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseV1_ReleaseReserveItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseReserveItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).ReleaseReserveItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseV1_ReleaseReserveItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).ReleaseReserveItems(ctx, req.(*ReleaseReserveItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseV1_GetRemainingItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemainingItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseV1Server).GetRemainingItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseV1_GetRemainingItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseV1Server).GetRemainingItems(ctx, req.(*GetRemainingItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseV1_ServiceDesc is the grpc.ServiceDesc for WarehouseV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse.WarehouseV1",
	HandlerType: (*WarehouseV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveItems",
			Handler:    _WarehouseV1_ReserveItems_Handler,
		},
		{
			MethodName: "ReleaseReserveItems",
			Handler:    _WarehouseV1_ReleaseReserveItems_Handler,
		},
		{
			MethodName: "GetRemainingItems",
			Handler:    _WarehouseV1_GetRemainingItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse.proto",
}
